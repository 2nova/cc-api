swagger: "2.0"
info:
  version: 1.0.0
  title: CG API
  description: ConceptGroup mobile applications API
  #termsOfService: http://swagger.io/terms/
  contact:
    name: 2Nova Team
    email: vad@2nova.ru
    url: http://2nova.ru
  license:
    name: MIT
    url: http://github.com/gruntjs/grunt/blob/master/LICENSE-MIT
host: acoolakids.ru
basePath: /app
schemes:
  - https
consumes:
  - application/json
  - application/x-www-form-urlencoded
  - multipart/form-data
produces:
  - application/json

paths:
  /dict/locations:
    get:
      description: Get locations dictionary (countries + regions + cities)
      operationId: coreDictLocations
      responses:
        200:
          description: Countries
          schema:
            type: array
            items:
              $ref: '#/definitions/CountriesResponse'
  #5610
  /favorite/good/{goodId}:
    post:
      description: add specified good to favorite
      operationId: addToFavorite
      parameters:
        - name: Authorization
          in: header
          required: true
          type: string
          default: Bearer <token>
        - name: goodId
          in: path
          description: ID of good
          required: true
          type: integer
          minimum: 0
      responses:
        200:
          description: Good succefuly added to favorite goods collection
        208:
          description: Good already added to favorite goods collection
        401:
          description: User not authenticated by token
          schema:
            $ref: '#/definitions/Error'
          examples:
            application/json:
                error: api.auth.required
                errno: 401
        500:
          description: unexpected error
          schema:
            $ref: '#/definitions/Error'
    delete:
      description: delete specified good from favorite
      operationId: deleteFromFavorite
      parameters:
        - name: Authorization
          in: header
          required: true
          type: string
          default: Bearer <token>
        - name: goodId
          in: path
          description: ID of good
          required: true
          type: integer
          minimum: 0
      responses:
        200:
          description: Good succefuly removed from favorite goods
        401:
          description: User not authenticated by token
          schema:
            $ref: '#/definitions/Error'
          examples:
            application/json:
                error: api.auth.required
                errno: 401
        422:
          description: good not found in user collection
        500:
          description: unexpected error
          schema:
            $ref: '#/definitions/Error'
    
  /favorite/goodlist:
    get:
      description: return all active goods in user's favorite collection
      operationId: getFavoriteList
      parameters:
        - name: Authorization
          in: header
          required: true
          type: string
          default: Bearer <token>
      responses:
        200:
          description: User favorite goods collection
        401:
          description: User not authenticated by token
          schema:
            $ref: '#/definitions/Error'
          examples:
            application/json:
                error: api.auth.required
                errno: 401
        500:
          description: unexpected error
          schema:
            $ref: '#/definitions/Error'
    delete:
      description: Remove all goods from favorite goods for specified user
      operationId: deleteFavoriteList
      parameters:
        - name: Authorization
          in: header
          required: true
          type: string
          default: Bearer <token>
      responses:
        200:
          description: User favorite goods collection succefull clear
        401:
          description: User not authenticated by token
          schema:
            $ref: '#/definitions/Error'
          examples:
            application/json:
                error: api.auth.required
                errno: 401
        500:
          description: unexpected error
          schema:
            $ref: '#/definitions/Error'
            
  /user/auth:
    post:
      description: Authenticate user with credentials
      operationId: userAuth
      parameters:
        - name: authData
          in: body
          description: user credentials
          required: true
          schema:
            $ref: '#/definitions/AuthRequest'
      responses:
        201:
          description: User authenticated
          schema:
            $ref: '#/definitions/AuthResponse'
        401:
          description: auth error
          schema:
            $ref: '#/definitions/Error'
          examples:
            application/json:
              error: api.auth.credentials.failed
              errno: 401
        422:
          description: form validation error
          schema:
            $ref: '#/definitions/FormError'
          examples:
            application/json:
                error: api.request.validation.failed
                errno: 0
                mapping:
                  password: 
                    - This value should not be blank.
        500:
           description: unexpected error
           schema:
             $ref: '#/definitions/Error'

  /user/register:
    post:
      description: Register & authenticate user with credentials
      operationId: userRegister
      parameters:
        - name: data
          in: body
          description: Registration info
          required: true
          schema:
            $ref: '#/definitions/RegisterRequest'
      responses:
        201:
          description: User registered and authenticated
          schema:
            $ref: '#/definitions/AuthResponse'
        422:
          description: form validation error
          schema:
            $ref: '#/definitions/FormError'
          examples:
            application/json:
                error: api.request.validation.failed
                errno: 0
                mapping:
                  password: 
                    - This value should not be blank.
        500:
           description: unexpected error
           schema:
             $ref: '#/definitions/Error'

  /user/profile:
    get:
      description: Get user profile
      operationId: userGetProfile
      parameters:
        - name: Authorization
          in: header
          required: true
          type: string
          default: Bearer <token>
        
      responses:
        401:
          description: User not authenticated by token
          schema:
            $ref: '#/definitions/Error'
          examples:
            application/json:
                error: api.auth.required
                errno: 401
        200:
          description: User profile
          schema:
            $ref: '#/definitions/ProfileResponse'
    put:
      description: Update user profile
      operationId: userUpdateProfile
      parameters:
        - name: Authorization
          in: header
          required: true
          type: string
          default: Bearer <token>
        - name: data
          in: body
          description: Profile data
          required: true
          schema:
            $ref: '#/definitions/UserProfileRequest'
        
      responses:
        401:
          description: User not authenticated by token
          schema:
            $ref: '#/definitions/Error'
          examples:
            application/json:
                error: api.auth.required
                errno: 401
        422:
          description: form validation error
          schema:
            $ref: '#/definitions/FormError'
          examples:
            application/json:
                error: api.request.validation.failed
                errno: 0
                mapping:
                  firstName: 
                    - This value should not be blank.
                  lastName: 
                    - This value should not be blank.
        200:
          description: Updated user profile
          schema:
            $ref: '#/definitions/ProfileResponse'
  /user/password:
    put:
      description: Change user password
      operationId: userPasswordChange
      parameters:
        - name: Authorization
          in: header
          required: true
          type: string
          default: Bearer <token>
        - name: data
          in: body
          description: Password data 
          required: true
          schema:
            $ref: '#/definitions/PasswordUpdateRequest'
        
      responses:
        401:
          description: User not authenticated by token
          schema:
            $ref: '#/definitions/Error'
          examples:
            application/json:
                error: api.auth.required
                errno: 401
        422:
          description: form validation error
          schema:
            $ref: '#/definitions/FormError'
          examples:
            application/json:
                error: api.request.validation.failed
                errno: 0
                mapping:
                  newPassword: 
                    - This value should not be blank.
        204:
          description: Password changed
    

  /user/addresses:
    get:
      description: Get list of User addresses
      operationId: userGetAddresses
      parameters:
        - name: Authorization
          in: header
          required: true
          type: string
          default: Bearer <token>
      responses:
        200:
          description: List of User addresses
          schema:
            type: array
            items:
              $ref: '#/definitions/UserAddressResponse'
        401:
          description: User not authenticated by token
          schema:
            $ref: '#/definitions/Error'
          examples:
            application/json:
                error: api.auth.required
                errno: 401

  /user/address:
    post:
      description: Create user address
      operationId: userCreateAddress
      parameters:
        - name: Authorization
          in: header
          required: true
          type: string
          default: Bearer <token>
        - name: data
          in: body
          description: Token
          required: true
          schema:
            $ref: '#/definitions/UserAddressRequest'          
      responses:
        201:
          description: User address created
          schema:
            $ref: '#/definitions/UserAddressResponse'
        401:
          description: User not authenticated by token
          schema:
            $ref: '#/definitions/Error'
          examples:
            application/json:
                error: api.auth.required
                errno: 401
  /user/address/{id}:
    delete:
      description: Delete user address
      operationId: userDeleteAddress
      parameters:
        - name: Authorization
          in: header
          required: true
          type: string
          default: Bearer <token>
        - name: id
          in: path
          description: ID of user address
          required: true
          type: integer
          minimum: 1
      responses:
        204:
          description: User address deleted
        401:
          description: User not authenticated by token
          schema:
            $ref: '#/definitions/Error'
          examples:
            application/json:
                error: api.auth.required
                errno: 401
    get:
      description: Get User address
      operationId: userGetAddress
      parameters:
        - name: Authorization
          in: header
          required: true
          type: string
          default: Bearer <token>
        - name: id
          in: path
          description: ID of user address
          required: true
          type: integer
          minimum: 1
      responses:
        200:
          description: User address
          schema:
            $ref: '#/definitions/UserAddressResponse'
        401:
          description: User not authenticated by token
          schema:
            $ref: '#/definitions/Error'
          examples:
            application/json:
                error: api.auth.required
                errno: 401
    put:
      description: Update user address
      operationId: userUpdateAddress
      parameters:
        - name: Authorization
          in: header
          required: true
          type: string
          default: Bearer <token>
        - name: id
          in: path
          description: ID of user address
          required: true
          type: integer
          minimum: 1
        - name: data
          in: body
          required: true
          schema:
            $ref: '#/definitions/UserAddressRequest'          
      responses:
        200:
          description: User address updated
          schema:
            $ref: '#/definitions/UserAddressResponse'
        401:
          description: User not authenticated by token
          schema:
            $ref: '#/definitions/Error'
          examples:
            application/json:
                error: api.auth.required
                errno: 401
  /user/deliveryByAddressId/{id}:
    get:
      description: Delivery info by User address
      operationId: userDeliveryByAddressId
      parameters:
        - name: Authorization
          in: header
          required: true
          type: string
          default: Bearer <token>
        - name: id
          in: path
          description: ID of user address
          required: true
          type: integer
          minimum: 1
      responses:
        200:
          description: List of Delivery Services
          schema:
            type: array
            items:
              $ref: '#/definitions/DeliveryResponse'
        401:
          description: User not authenticated by token
          schema:
            $ref: '#/definitions/Error'
          examples:
            application/json:
                error: api.auth.required
                errno: 401

  /user/orders:
    get:
      description: List of short User orders
      operationId: userOrders
      parameters:
        - name: Authorization
          in: header
          required: true
          type: string
          default: Bearer <token>
      responses:
        200:
          description: List of short User orders
          schema:
            type: array
            items:
              $ref: '#/definitions/OrderShortResponse'
        401:
          description: User not authenticated by token
          schema:
            $ref: '#/definitions/Error'
          examples:
            application/json:
                error: api.auth.required
                errno: 401

  /user/order/{id}:
    get:
      description: List of short User orders
      operationId: userOrders
      parameters:
        - name: Authorization
          in: header
          required: true
          type: string
          default: Bearer <token>
        - name: id
          in: path
          description: ID of user address
          required: true
          type: integer
          minimum: 1
      responses:
        200:
          description: Order extended info
          schema:
            type: array
            items:
              $ref: '#/definitions/OrderExtendedResponse'
        401:
          description: User not authenticated by token
          schema:
            $ref: '#/definitions/Error'
          examples:
            application/json:
                error: api.auth.required
                errno: 401

  /user/provider/vk:
    post:
      description: Register & authenticate user with vk provider
      operationId: userVkAutethicate
      parameters:
      - name: data
        in: body
        description: Token
        required: true
        schema:
          $ref: '#/definitions/RegisterViaOauthToken'
      responses:
        201:
          description: User authenticated
          schema:
            $ref: '#/definitions/AuthResponse'
        206:
          description: For finish user registration need send user email to 'user/advanced_register'
        500:
           description: unexpected error
           schema:
             $ref: '#/definitions/Error'

  /user/provider/facebook:
    post:
      description: Register & authenticate user with facebook provider
      operationId: userFacebookAutethicate
      parameters:
      - name: data
        in: body
        description: facebook token
        required: true
        schema:
            $ref: '#/definitions/RegisterViaOauthToken'
      responses:
        201:
          description: User authenticated
          schema:
            $ref: '#/definitions/AuthResponse'
        206:
          description: For finish user registration need send user email to 'user/advanced_register'
        500:
           description: unexpected error
           schema:
             $ref: '#/definitions/Error'

  /user/advanced_register:
    post:
      description: Get user email for complete user register via facebook or vk
      operationId: userAdditionalRegister
      parameters:
      - name: email
        in: body
        description: User email
        required: true
        schema:
          $ref: '#/definitions/RegisterRequest'
      responses:
        201:
          description: User registered
          schema:
            $ref: '#/definitions/AuthResponse'
        409:
          description: User email already in use
          schema:
            $ref: '#/definitions/FormError'
          examples:
            application/json:
                error: api.request.validation.failed
                errno: 0
                mapping:
                  email:
                    - This already in use.
        422:
          description: form validation error
          schema:
            $ref: '#/definitions/FormError'
          examples:
            application/json:
                error: api.request.validation.failed
                errno: 0
                mapping:
                  email:
                    - This value should not be blank.
        500:
           description: unexpected error
           schema:
             $ref: '#/definitions/Error'

  /cart:
    get:
      description: Get ShoppingCart
      operationId: cartGet
      parameters:
        - name: Authorization
          in: header
          required: true
          type: string
          default: Bearer <token>
      responses:
        200:
          description: ShoppingCart object
          schema:
            $ref: '#/definitions/CartResponse'
        401:
          description: User not authenticated by token
          schema:
            $ref: '#/definitions/Error'
          examples:
            application/json:
                error: api.auth.required
                errno: 401
    delete:
      description: Clear ShoppingCart
      operationId: cartClear
      parameters:
        - name: Authorization
          in: header
          required: true
          type: string
          default: Bearer <token>
      responses:
        204:
          description: ShoppingCart cleard
          schema:
            $ref: '#/definitions/CartResponse'
        401:
          description: User not authenticated by token
          schema:
            $ref: '#/definitions/Error'
          examples:
            application/json:
                error: api.auth.required
                errno: 401

  /cart/item:
    post:
      description: Create Cart Item
      operationId: cartItemCreate
      parameters:
        - name: Authorization
          in: header
          required: true
          type: string
          default: Bearer <token>
        - name: data
          in: body
          required: true
          schema:
            required:
              - goodId
              - size
              - qty
            properties:
              goodId:
                type: integer
                minimum: 1
              size:
                type: string
              qty:
                type: integer
                minimum: 1
                maximum: 9
      responses:
        201:
          description: ShoppingCart object
          schema:
            $ref: '#/definitions/CartResponse'
        401:
          description: User not authenticated by token
          schema:
            $ref: '#/definitions/Error'
          examples:
            application/json:
                error: api.auth.required
                errno: 401

  /cart/item/{id}:
    delete:
      description: Delete ShoppingCart Item
      operationId: cartItemDelete
      parameters:
        - name: Authorization
          in: header
          required: true
          type: string
          default: Bearer <token>
        - name: id
          in: path
          description: ID of user address
          required: true
          type: integer
          minimum: 1
      responses:
        200:
          description: ShoppingCart Item deleted
          schema:
            $ref: '#/definitions/CartResponse'
        401:
          description: User not authenticated by token
          schema:
            $ref: '#/definitions/Error'
          examples:
            application/json:
                error: api.auth.required
                errno: 401
    put:
      description: Update ShoppingCart Item
      operationId: cartItemDelete
      parameters:
        - name: Authorization
          in: header
          required: true
          type: string
          default: Bearer <token>
        - name: id
          in: path
          description: ID of user address
          required: true
          type: integer
          minimum: 1
        - name: data
          in: body
          required: true
          schema:
            required:
              - size
              - qty
            properties:
              size:
                type: string
              qty:
                type: integer
                minimum: 1
                maximum: 9
      responses:
        200:
          description: ShoppingCart Item updated
          schema:
            $ref: '#/definitions/CartResponse'
        401:
          description: User not authenticated by token
          schema:
            $ref: '#/definitions/Error'
          examples:
            application/json:
                error: api.auth.required
                errno: 401

  /cart/order:
    post:
      description: Create Order 
      operationId: cartOrder
      parameters:
        - name: Authorization
          in: header
          required: true
          type: string
          default: Bearer <token>
        - name: data
          in: body
          required: true
          schema:
            required:
              - addressId
              - deliveryType
              - paymentType
              - items
            properties:
              addressId:
                type: integer
                minimum: 1
              deliveryType:
                type: string
              paymentType:
                type: string
              discountCoupon:
                type: string
              items:
                type: array
                items:
                  required:
                    - goodId
                    - size
                    - qty
                    - price
                  properties:
                    goodId:
                      type: integer
                      minimum: 1
                    size:
                      type: string
                    qty:
                      type: integer
                      minimum: 1
                      maximum: 9
                    price:
                      description: one item price
                      type: integer
                      minimum: 1
                      maximum: 9999
                    
      responses:
        201:
          description: Created Order 
          schema:
            $ref: '#/definitions/OrderExtendedResponse'
        401:
          description: User not authenticated by token
          schema:
            $ref: '#/definitions/Error'
          examples:
            application/json:
                error: api.auth.required
                errno: 401
  /cart/list:
    get:
      description: return all goods in user's shopping cart
      operationId: getCartList
      parameters:
        - name: Authorization
          in: header
          required: true
          type: string
          default: Bearer <token>
      responses:
        200:
          description: User shopping cart collection
        401:
          description: User not authenticated by token
          schema:
            $ref: '#/definitions/Error'
          examples:
            application/json:
                error: api.auth.required
                errno: 401
        500:
          description: unexpected error
          schema:
            $ref: '#/definitions/Error'
    
definitions:
  CountriesResponse:
    required:
      - id
      - title
      - phoneCode
      - phoneMask
      - regions
    properties:
      id:
        type: integer
        minimum: 1
      title:
        type: string
      phoneCode:
        type: string
        default: 7
      phoneMask:
        type: string
        default: (999) 999-99-99
      regions:
        type: array
        items:
          $ref: '#/definitions/RegionsResponse'
  RegionsResponse:
    required:
      - id
      - title
      - cities
    properties:
      id:
        type: integer
        minimum: 1
      title:
        type: string
      cities:
        type: array
        items:
          $ref: '#/definitions/CitiesResponse'
  CitiesResponse:
    required:
      - id
      - title
    properties:
      id:
        type: integer
        minimum: 1
      title:
        type: string

  UserModel:
    required:
      - id
      - firstName
      - lastName
      - middleName
      - isBlacklisted
      - isSubscribed
      - lastActivity
    properties:
      id:
        type: integer
        minimum: 1
      firstName:
        type: string
        default: Vasya
      lastName:
        type: string
        default: Pupkin
      middleName:
        type: string
        default: ''
      isBlacklisted:
        type: boolean
      isSubscribed:
        type: boolean
      lastActivity:
        type: string
        format: date-time
        default: '2016-11-08T18:33:20+03:00'

  AuthModel:
    required:
      - token
    properties:
      token:
        description: JWT token
        type: string
        default: 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzUxMiJ9.eyJ1aWQiOjc3ODQ2LCJpYXQiOjE0Nzg2ODk2NzN9.hKYuKjA5KbXV27ibs_XgqN9fz9zow1xia1jmLHCwk4ItJ59Qti78BsquOoXZK6WmpoU2dJvyquhsu2svO-mNmA'
        
  ProfileResponse:
    type: object
    required:
      - user
    properties:
      user:
        $ref: '#/definitions/UserModel'

  AuthResponse:
    type: object
    required:
      - user
      - auth
    properties:
      user:
        $ref: '#/definitions/UserModel'
      auth:
        $ref: '#/definitions/AuthModel'

  AuthRequest:
    required:
      - email
      - password
    properties:
      email:
        type: string
        # format: email
        default: ask@me.ru
      password:
        type: string
        # format: password
        default: UsErPasSW0rDIsNOtEmpTy

  RegisterRequest:
    required:
      - email
      - password
      - firstName
      - middleName
      - lastName
      - subscribe
    properties:
      email:
        type: string
        # format: email
        default: ask@me.ru
      password:
        type: string
        # format: password
        default: UsErPasSW0rDIsNOtEmpTy
      firstName:
        type: string
        default: Vasya
      middleName:
        type: string
        default: ''
      lastName:
        type: string
        default: Pupkin
      subscribe:
        type: boolean

  UserProfileRequest:
    required:
      - firstName
      - middleName
      - lastName
      - subscribe
    properties:
      firstName:
        type: string
        default: Vasya
      middleName:
        type: string
        default: ''
      lastName:
        type: string
        default: Pupkin
      subscribe:
        type: boolean
        
  UserAddressRequest:
    required:
      - firstName
      - middleName
      - lastName
      - phoneCode
      - phoneNumber
      - regionId
      - cityId
      - postalCode
      - street
      - house
      - structure
      - room
    properties:
      firstName:
        type: string
      middleName:
        type: string
      lastName:
        type: string
      phoneCode:
        type: string
        default: 7
      phoneMask:
        type: string
        default: (999) 999-99-99
      regionId:
        type: integer
        minimum: 1
      cityId:
        type: integer
        minimum: 1
      postalCode:
        type: string
      street:
        type: string
      house:
        type: string
      structure:
        type: string
      room:
        type: string
  UserAddressResponse:
    required:
      - id
      - firstName
      - middleName
      - lastName
      - phone
      - countryName
      - regionId
      - regionName
      - cityId
      - cityName
      - postalCode
      - street
      - house
      - structure
      - room
    properties:
      id:
        type: integer
        minimum: 1
      firstName:
        type: string
      middleName:
        type: string
      lastName:
        type: string
      phone:
        type: string
      countryName:
        type: string
      regionId:
        type: integer
        minimum: 1
      regionName:
        type: string
      cityId:
        type: integer
        minimum: 1
      cityName:
        type: string
      postalCode:
        type: string
      street:
        type: string
      house:
        type: string
      structure:
        type: string
      room:
        type: string
        
  PasswordUpdateRequest:
    required:
      - oldPassword
      - newPassword
    properties:
      oldPassword:
        type: string
      newPassword:
        type: string
  
  UserFavoriteGoodRequest:
    required:
      - token
      - goodId
    properties:
      goodId:
        type: integer
        minimum: 1
      token:
        type: integer
  
  DeliveryResponse:
    required:
      - type
      - title
      - cost
      - days
      - logo
    properties:
      type:
        type: string
      title:
        type: string
      cost:
        type: integer
        minimum: 1
        maximum: 99999
      days:
        type: integer
        minimum: 1
        maximum: 20
      logo:
        type: string
        format: uri
  
  OrderDeliveryResponse:
    required:
      - type
      - title
      - cost
      - days
      - logo
      - address
      - phone
    properties:
      type:
        type: string
      title:
        type: string
      cost:
        type: integer
        minimum: 1
        maximum: 99999
      days:
        type: integer
        minimum: 1
        maximum: 20
      logo:
        type: string
        format: uri
      address:
        type: string
      phone:
        type: string

  OrderStatus:
    required:
      - id
      - title
    properties:
      id:
        type: integer
        minimum: 1
        maximum: 8
      title:
        type: string
  
  FromSite:
    required:
      - id
      - slug
    properties:
      id:
        type: integer
        minimum: 1
      slug:
        type: string
        minLength: 5
        maxLength: 7 
  
  OrderShortResponse:
    required:
      - id
      - sum
      - status
      - fromSite
      - createdAt
    properties:
      id:
        type: integer
        minimum: 1
      sum:
        type: integer
        minimum: 1
        maximum: 99999
      status:
        $ref: '#/definitions/OrderStatus'
      fromSite:
        $ref: '#/definitions/FromSite'
      createdAt:
        type: string
        format: date-time
      
  OrderExtendedResponse:
    required:
      - id
      - sum
      - status
      - fromSite
      - createdAt
      - delivery
      - payment
      - items
    properties:
      id:
        type: integer
        minimum: 1
      sum:
        type: integer
        minimum: 1
        maximum: 99999
      status:
        $ref: '#/definitions/OrderStatus'
      fromSite:
        $ref: '#/definitions/FromSite'
      createdAt:
        type: string
        format: date-time
      delivery:
        $ref: '#/definitions/OrderDeliveryResponse'
      payment:
        type: object
        required:
          - type
        properties:
          type:
            type: string
      items:
        type: array
        items:
          $ref: '#/definitions/OrderItemExtendedResponse'

  OrderItemExtendedResponse:
    required:
      - fromSite
      - good
      - size
      - qty
      - price
      - sum
    properties:
      fromSite:
        $ref: '#/definitions/FromSite'
      good:
        $ref: '#/definitions/Good'
      size:
        type: string
      qty:
        type: integer
        minimum: 1
        maximum: 9
      price:
        type: integer
        minimum: 1
        maximum: 9999
      sum:
        type: integer
        minimum: 1
        maximum: 99999

  Good:
    required:
      - id
      - title
      - article
      - color
      - price
      - oldPrice
    properties:
      id:
        type: integer
        minimum: 1
      title:
        type: string
      article:
        type: string
      color:
        type: string
      price:
        type: integer
        minimum: 1
        maximum: 9999
      oldPrice:
        type: integer
        minimum: 0
        maximum: 9999

  CartItem:
    required:
      - id
      - good
      - price
      - qty
      - size
      - fromSite
      - discount
      - expiresAt
      - createdAt
      - updatedAt
    properties:
      id:
        type: integer
        minimum: 1
      good:
        $ref: '#/definitions/Good'
      price:
        type: integer
        minimum: 1
      qty:
        type: integer
        minimum: 1
        maximum: 9
      size:
        type: string
      fromSite:
        $ref: '#/definitions/FromSite'
      discount:
        type: object
        required:
          - mask
          - titles
        properties:
          mask:
            type: integer
            minimum: 0
          titles:
            type: array
            items:
              type: string
            minItems: 0
            maxItems: 4
            uniqueItems: true
      createdAt:
        type: string
        format: date-time
      updatedAt:
        type: string
        format: date-time
      expiresAt:
        type: string
        format: date-time

  CartResponse:
    required:
      - discountCoupon
      #- returnCoupon
      - items
    properties:
      discountCoupon:
        type: string
      items:
        type: array
        items:
          $ref: '#/definitions/CartItem'

        
  RegisterViaOauthToken:
    required:
      - token
    properties:
      token:
        type: string
  
  # HTTP 400+
  Error:
    required:
      - error
      - errno
    properties:
      error:
        type: string
      errno:
        type: integer
        format: int32
  # HTTP 422
  FormError:
    required:
      - error
      - errno
      - mapping
    properties:
      error:
        type: string
      errno:
        type: integer
        format: int32
        default: 0
      mapping:
        type: array