swagger: "2.0"
info:
  version: 1.0.0
  title: CG API
  description: ConceptGroup mobile applications API
  #termsOfService: http://swagger.io/terms/
  contact:
    name: 2Nova Team
    email: vad@2nova.ru
    url: http://2nova.ru
  license:
    name: MIT
    url: http://github.com/gruntjs/grunt/blob/master/LICENSE-MIT
host: acoolakids.ru
basePath: /app
schemes:
  - https
consumes:
  - application/json
  - application/x-www-form-urlencoded
  - multipart/form-data
produces:
  - application/json

paths:
  /dict/locations:
    get:
      description: Get locations dictionary (countries + regions + cities)
      operationId: coreDictLocations
      responses:
        200:
          description: Countries
          schema:
            type: array
            items:
              $ref: '#/definitions/CountriesResponse'
  /user/auth:
    post:
      description: Authenticate user with credentials
      operationId: userAuth
      parameters:
        - name: authData
          in: body
          description: user credentials
          required: true
          schema:
            $ref: '#/definitions/AuthRequest'
      responses:
        201:
          description: User authenticated
          schema:
            $ref: '#/definitions/AuthResponse'
        401:
          description: auth error
          schema:
            $ref: '#/definitions/Error'
          examples:
            application/json:
              error: api.auth.credentials.failed
              errno: 401
        422:
          description: form validation error
          schema:
            $ref: '#/definitions/FormError'
          examples:
            application/json:
                error: api.request.validation.failed
                errno: 0
                mapping:
                  password: 
                    - This value should not be blank.
        500:
           description: unexpected error
           schema:
             $ref: '#/definitions/Error'

  /user/register:
    post:
      description: Register & authenticate user with credentials
      operationId: userRegister
      parameters:
        - name: data
          in: body
          description: Registration info
          required: true
          schema:
            $ref: '#/definitions/RegisterRequest'
      responses:
        201:
          description: User registered and authenticated
          schema:
            $ref: '#/definitions/AuthResponse'
        422:
          description: form validation error
          schema:
            $ref: '#/definitions/FormError'
          examples:
            application/json:
                error: api.request.validation.failed
                errno: 0
                mapping:
                  password: 
                    - This value should not be blank.
        500:
           description: unexpected error
           schema:
             $ref: '#/definitions/Error'

  /user/profile:
    get:
      description: Get user profile
      operationId: userGetProfile
      parameters:
        - name: Authorization
          in: header
          required: true
          type: string
          default: Bearer <token>
        
      responses:
        401:
          description: User not authenticated by token
          schema:
            $ref: '#/definitions/Error'
          examples:
            application/json:
                error: api.auth.required
                errno: 401
        200:
          description: User profile
          schema:
            $ref: '#/definitions/ProfileResponse'
    put:
      description: Update user profile
      operationId: userUpdateProfile
      parameters:
        - name: Authorization
          in: header
          required: true
          type: string
          default: Bearer <token>
        - name: data
          in: body
          description: Profile data
          required: true
          schema:
            $ref: '#/definitions/UserProfileRequest'
        
      responses:
        401:
          description: User not authenticated by token
          schema:
            $ref: '#/definitions/Error'
          examples:
            application/json:
                error: api.auth.required
                errno: 401
        422:
          description: form validation error
          schema:
            $ref: '#/definitions/FormError'
          examples:
            application/json:
                error: api.request.validation.failed
                errno: 0
                mapping:
                  firstName: 
                    - This value should not be blank.
                  lastName: 
                    - This value should not be blank.
        200:
          description: Updated user profile
          schema:
            $ref: '#/definitions/ProfileResponse'
  /user/password:
    put:
      description: Change user password
      operationId: userPasswordChange
      parameters:
        - name: Authorization
          in: header
          required: true
          type: string
          default: Bearer <token>
        - name: data
          in: body
          description: Password data 
          required: true
          schema:
            $ref: '#/definitions/PasswordUpdateRequest'
        
      responses:
        401:
          description: User not authenticated by token
          schema:
            $ref: '#/definitions/Error'
          examples:
            application/json:
                error: api.auth.required
                errno: 401
        422:
          description: form validation error
          schema:
            $ref: '#/definitions/FormError'
          examples:
            application/json:
                error: api.request.validation.failed
                errno: 0
                mapping:
                  newPassword: 
                    - This value should not be blank.
        204:
          description: Password changed
    

  /user/addresses:
    get:
      description: Get user address
      operationId: userGetAddress
      parameters:
        - name: Authorization
          in: header
          required: true
          type: string
          default: Bearer <token>
      responses:
        200:
          description: User addresses
          schema:
            type: array
            items:
              $ref: '#/definitions/UserAddressResponse'
        401:
          description: User not authenticated by token
          schema:
            $ref: '#/definitions/Error'
          examples:
            application/json:
                error: api.auth.required
                errno: 401

  /user/address/{id}:
    delete:
      description: Delete user address
      operationId: userDeleteAddress
      parameters:
        - name: Authorization
          in: header
          required: true
          type: string
          default: Bearer <token>
        - name: id
          in: path
          description: ID of user address
          required: true
          type: integer
          format: int32
      responses:
        204:
          description: User address deleted
        401:
          description: User not authenticated by token
          schema:
            $ref: '#/definitions/Error'
          examples:
            application/json:
                error: api.auth.required
                errno: 401
  /user/provider/vk:
    post:
      description: Register & authenticate user with vk provider
      operationId: userVkAutethicate
      parameters:
      - name: data
        in: body
        description: Token
        required: true
        schema:
          $ref: '#/definitions/RegisterViaOauthToken'
      responses:
        201:
          description: User authenticated
          schema:
            $ref: '#/definitions/AuthResponse'
        206:
          description: For finish user registration need send user email to 'user/advanced_register'
        500:
           description: unexpected error
           schema:
             $ref: '#/definitions/Error'

  /user/provider/facebook:
    post:
      description: Register & authenticate user with facebook provider
      operationId: userFacebookAutethicate
      parameters:
      - name: data
        in: body
        description: facebook token
        required: true
        schema:
            $ref: '#/definitions/RegisterViaOauthToken'
      responses:
        201:
          description: User authenticated
          schema:
            $ref: '#/definitions/AuthResponse'
        206:
          description: For finish user registration need send user email to 'user/advanced_register'
        500:
           description: unexpected error
           schema:
             $ref: '#/definitions/Error'

  /user/advanced_register:
      post:
        description: Get user email for complete user register via facebook or vk
        operationId: userAdditionalRegister
        parameters:
        - name: email
          in: body
          description: User email
          required: true
          schema:
            $ref: '#/definitions/RegisterRequest'
        responses:
          201:
            description: User registered
            schema:
              $ref: '#/definitions/AuthResponse'
          409:
            description: User email already in use
            schema:
              $ref: '#/definitions/FormError'
            examples:
              application/json:
                  error: api.request.validation.failed
                  errno: 0
                  mapping:
                    email:
                      - This already in use.
          422:
            description: form validation error
            schema:
              $ref: '#/definitions/FormError'
            examples:
              application/json:
                  error: api.request.validation.failed
                  errno: 0
                  mapping:
                    email:
                      - This value should not be blank.
          500:
             description: unexpected error
             schema:
               $ref: '#/definitions/Error'


definitions:
  CountriesResponse:
    required:
      - id
      - title
      - phoneCode
      - phoneMask
      - regions
    properties:
      id:
        type: integer
        format: int32
      title:
        type: string
      phoneCode:
        type: string
        default: 7
      phoneMask:
        type: string
        default: (999) 999-99-99
      regions:
        type: array
        items:
          $ref: '#/definitions/RegionsResponse'
  RegionsResponse:
    required:
      - id
      - title
      - cities
    properties:
      id:
        type: integer
        format: int32
      title:
        type: string
      cities:
        type: array
        items:
          $ref: '#/definitions/CitiesResponse'
  CitiesResponse:
    required:
      - id
      - title
    properties:
      id:
        type: integer
        format: int64
      title:
        type: string

  UserModel:
    required:
      - id
      - firstName
      - lastName
      - middleName
      - isBlacklisted
      - isSubscribed
      - lastActivity
    properties:
      id:
        type: integer
        format: int32
        default: 100500
      firstName:
        type: string
        default: Vasya
      lastName:
        type: string
        default: Pupkin
      middleName:
        type: string
        default: ''
      isBlacklisted:
        type: boolean
      isSubscribed:
        type: boolean
      lastActivity:
        type: string
        format: date-time
        default: '2016-11-08T18:33:20+03:00'

  AuthModel:
    required:
      - token
    properties:
      token:
        description: JWT token
        type: string
        default: 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzUxMiJ9.eyJ1aWQiOjc3ODQ2LCJpYXQiOjE0Nzg2ODk2NzN9.hKYuKjA5KbXV27ibs_XgqN9fz9zow1xia1jmLHCwk4ItJ59Qti78BsquOoXZK6WmpoU2dJvyquhsu2svO-mNmA'
        
  ProfileResponse:
    type: object
    required:
      - user
    properties:
      user:
        $ref: '#/definitions/UserModel'

  AuthResponse:
    type: object
    required:
      - user
      - auth
    properties:
      user:
        $ref: '#/definitions/UserModel'
      auth:
        $ref: '#/definitions/AuthModel'

  AuthRequest:
    required:
      - email
      - password
    properties:
      email:
        type: string
        # format: email
        default: ask@me.ru
      password:
        type: string
        # format: password
        default: UsErPasSW0rDIsNOtEmpTy

  RegisterRequest:
    required:
      - email
      - password
      - firstName
      - middleName
      - lastName
      - subscribe
    properties:
      email:
        type: string
        # format: email
        default: ask@me.ru
      password:
        type: string
        # format: password
        default: UsErPasSW0rDIsNOtEmpTy
      firstName:
        type: string
        default: Vasya
      middleName:
        type: string
        default: ''
      lastName:
        type: string
        default: Pupkin
      subscribe:
        type: boolean

  UserProfileRequest:
    required:
      - firstName
      - middleName
      - lastName
      - subscribe
    properties:
      firstName:
        type: string
        default: Vasya
      middleName:
        type: string
        default: ''
      lastName:
        type: string
        default: Pupkin
      subscribe:
        type: boolean
        
  UserAddressResponse:
    required:
      - id
      - firstName
      - middleName
      - lastName
      - phone
      - countryName
      - regionId
      - regionName
      - cityId
      - cityName
      - postalCode
      - street
      - house
      - structure
      - room
    properties:
      id:
        type: integer
        format: int32
      firstName:
        type: string
      middleName:
        type: string
      lastName:
        type: string
      phone:
        type: string
      countryName:
        type: string
      regionId:
        type: integer
        format: int32
      regionName:
        type: string
      cityId:
        type: integer
        format: int32
      cityName:
        type: string
      postalCode:
        type: string
      street:
        type: string
      house:
        type: string
      structure:
        type: string
      room:
        type: string
        
  PasswordUpdateRequest:
    required:
      - oldPassword
      - newPassword
    properties:
      oldPassword:
        type: string
      newPassword:
        type: string
        
  
  RegisterViaOauthToken:
    required:
      - token
    properties:
      token:
        type: string
  
  # HTTP 400+
  Error:
    required:
      - error
      - errno
    properties:
      error:
        type: string
      errno:
        type: integer
        format: int32
  # HTTP 422
  FormError:
    required:
      - error
      - errno
      - mapping
    properties:
      error:
        type: string
      errno:
        type: integer
        format: int32
        default: 0
      mapping:
        type: array